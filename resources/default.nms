@namespace __default__

	@class Int
		# Make an Int from another Int. (Clone operation)
		Int(Int value)
		# Cast a Long down to an Int. (Precision loss)
		Int(Long value)
		# Discard the decimals and convert a Float to Int.
		Int(Float value)
		# Discard the decimals and convert a Double to Int.
		Int(Double value)
		# Attempt to parse a String into an Int.
		# Only succeeds if the entire String can be represented as an Int.
		# Throws NumberFormatException otherwise
		Int(String value)
	@endclass
	
	@class Long
		# Upcast an Int to a Long.
		Long(Int value)
		# Clone a Long.
		Long(Long value)
		# Discard the decimals and convert a Float to Long.
		Long(Float value)
		# Discard the decimals and convert a Double to Long.
		Long(Double value)
		# Attempt to parse a String into a Long.
		# Only succeeds if the entire String can be represented as a Long.
		# Throws NumberFormatException otherwise
		Long(String value)
	@endclass

	@class Float
		# Cast an Int to a Float.
		Float(Int value)
		# Cast a Long to a Float.
		Float(Long value)
		# Clone a Float.
		Float(Float value)
		# Cast a Double to a Float. (Precision loss)
		Float(Double value)
		# Attempt to parse a String into a Float.
		# Only succeeds if the entire String can be represented as a Float.
		# Throws NumberFormatException otherwise
		Float(String value)
	@endclass

	@class Double
		# Cast an Int to a Double.
		Double(Int value)
		# Cast a Long to a Double.
		Double(Long value)
		# Upcast a Float to a Double.
		Double(Float value)
		# Clone a Double.
		Double(Double value)
		# Attempt to parse a String into a Double.
		# Only succeeds if the entire String can be represented as a Double.
		# Throws NumberFormatException otherwise
		Double(String value)
	@endclass

	@class Boolean
		# Copy a Boolean.
		Boolean(Boolean)
		# Parse true or false in string format to a boolean. Defaults to false
		Boolean(String)
	@endclass
	
	@class Void
	@endclass

	@class String
		# Clone a String.
		String(String value)
		# Get the textual value of an Int.
		String(Int value)
		# Get the textual value of a Long.
		String(Long value)
		# Get the textual value of a Float.
		String(Float value)
		# Get the textual value of a Boolean.
		String(Boolean value)
		# Get the textual value of a Double.
		String(Double value)
		# Get the Player name in textual form.
		String(Player value)
		# Get the Entity UUID in textual form.
		String(Entity value)
		# Get the Block coordinates in textual form.
		String(Block value)
		# Get the Item in textual form.
		String(Item value)
		# Returns true if the String contains *sequence*, false otherwise.
		Boolean contains(String sequence)
		# Returns true if the String is equal except for case to *other*, false otherwise.
		Boolean equalsIgnoreCase(String other)
		# Returns the index the first occurrence of *sequence* starts at.
		# If the String does not contain *sequence*, returns -1.
		Int indexOf(String sequence)
		# Replaces all occurrences of *old* with *new* in the String
		String replace(String old, String new)
		# Returns a substring starting (inclusive) at *start* and ending (exclusive) at *end*.
		# Throws IndexOutOfBoundsException when *start* or *end* are invalid indices within the string.
		# Throws InvalidParameterException when *end* is smaller than *start*.
		String substring(Int start, Int end)
		# Returns the String in lowercase.
		String toLowerCase()
		# Returns the String in uppercase.
		String toUpperCase()
		# Returns the String with leading and trailing whitespace omitted.
		String trim()

		Int length()
		Boolean matches(String regex)
		String[] split(String delimiter)
		Boolean startsWith(String start)
		String string()
	@endclass

	@class Player
		# Construct a player from their name or UUID.
		# Null if the player does not exist.
		Player(String value)
		Player(String value, Player visibleTo)
		# Find a player at these coordinates in the passed world.
		# Null if the player does not exist. In the scenario that multiple players
		# are in the same location, nondeterministically returns one Player at that location.
		Player(Int x, Int y, Int z, String world)

		# Returns the distance this entity has fallen.
		Float getFallDistance()
		# Returns the entity's current fire ticks (ticks before the entity stops being on fire).
		Int getFireTicks()
		# Sets the entity's current fire ticks (ticks before the entity stops being on fire).
		setFireTicks(Int ticks)
		# Gets the entity's current x position.
		Double getX()
		# Gets the entity's current y position.
		Double getY()
		# Gets the entity's current z position.
		Double getZ()
		# Gets the entity's current rotation around the y axis.
		Float getYaw()
		# Gets the entity's current rotation around the x axis.
		Float getPitch()	
		# Gets the current world this entity resides in.
		String getWorld()
		# Returns true if this entity has been marked for removal.
		Boolean isDead()
		# Checks to see if this player is currently flying or not.
		Boolean isFlying()
		# Returns true if the entity is supported by a block.
		# This value is a state updated by the server and is not recalculated unless the entity moves.
		Boolean isOnGround()
		# Returns true if the player is in sneak mode
		Boolean isSneaking()
		# Gets whether the player is sprinting or not.
		Boolean isSprinting()
		# Gives the player the amount of experience specified.
		giveExp(Int amount)
		# Gets the player's current experience points towards the next level.
		Float getExp()
		# Sets the player's current experience points towards the next level.
		giveExpLevels(Int amount)
		# Gets the player's current experience level.
		Float getLevel()
		# Sets the player's current experience level.
		setLevel(Int level)
		# Deals the given amount of damage to this entity.
		damage(Double amount)
		# Gets the entity's health from 0 to getMaxHealth(), where 0 is dead.
		Double getHealth()
		# Sets the entity's health from 0 to getMaxHealth(), where 0 is dead.
		# Throws IllegalArgumentException if the health is < 0 or > getMaxHealth().
		setHealth(Double health)
		# Gets the maximum health this entity has.
		Double getMaxHealth()
		# Sets the maximum health this entity has. If the health of the entity is
		# above the value provided it will be clamped to the max value. Only sets
		# the 'base' max health value, any modifiers changing this value (potions,
		# etc) will apply *after* this value. The value returned by getMaxHealth may
		# deviate from the value set here.
		setMaxHealth()
		# Gets the players current food level.
		Float getFoodLevels()
		# Sets the players current food level.
		setFoodLevel(Int value)
		# Gets the players current saturation level. Saturation is a buffer for food
		# level. Your food level will not drop if you are saturated > 0.
		Float getSaturation()
		# Sets the players current saturation level.
		setSaturation(Float value)
		# Returns whether this entity is inside a vehicle.
		Boolean isInsideVehicle()
		# Leave the current vehicle. If the entity is currently in a vehicle (and is
		# removed from it), true will be returned, otherwise false will be returned.
		Boolean leaveVehicle()
		# Force-closes the currently open inventory view for this player, if any.
		closeInventory()
		# Gets the player's playtime on the server in milliseconds.
		Long getTimePlayed()
		# Gets the player's current locale. The value of the locale String is not
		# defined properly. The vanilla Minecraft client will use lowercase
		# language / country pairs separated by an underscore, but custom resource
		# packs may use any format they wish.
		String getLocale()
		# Gets the UUID of the entity (in string format).
		String getUniqueId()
		# Checks if this player is currently online.
		Boolean isOnline()
		# Checks if this Player is a server operator.
		Boolean isOp()
		# Request that the player's client downloads and switches resource pack.
		setResourcePack(String resourcePackURL, String resourcePackSHA1)
		# Returns the Item found in the slot at the given index.
		Item getItem(Int slot)
		# Gets a copy of the item the player is currently holding in their main hand.
		Item getItemInMainHand()
		# Gets a copy of the item the player is currently holding in their off hand.
		Item getItemInOffHand()
		# Return the Item from the boots slot.
		Item getBoots()
		# Return the Item from the leg slot.
		Item getLeggings()
		# Return the Item from the chestplate slot.
		Item getChestplate()
		# Return the Item from the helmet slot.
		Item getHelmet()
		# Stores the Item at the given index of the inventory. Indexes 0 through 8 refer to the
		# hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top left
		# corner of the inventory, moving to the right, and moving to the row below it back on the
		# left side when it reaches the end of the row. It follows the same path in the inventory like you
		# would read a book. Indexes 36 through 39 refer to the armor slots. Though you can set
		# armor with this method using these indexes, you are encouraged to use the provided
		# methods for those slots. If you attempt to use this method with an index less than 0 or
		# greater than 39, an ArrayIndexOutOfBounds exception will be thrown.
		setItem(Int slot, Item item)
		# Sets the item the player is holding in their main hand.
		setItemInMainHand(Item item)
		# Sets the item the player is holding in their off hand.
		setItemInOffHand(Item item)
		# Put the given Item into the boots slot. This does not check if the Item is a boots.
		setBoots(Item item)
		# Put the given Item into the leg slot. This does not check if the Item is a pair of leggings.
		setLeggings(Item item)
		# Put the given Item into the chestplate slot. This does not check if the Item is a chestplate.
		setChestplate(Item item)
		# Put the given Item into the helmet slot. This does not check if the Item is a helmet.
		setHelmet(Item item)
		# Returns whether the player is playing a challenge.
		Boolean isPlayingChallenge()
		# Returns the challenge the player is playing. Returns null when player is not playing any challenge.
		String getCurrentChallenge()
		# Returns the amount of challenge points the player has.
		Int getChallengePoints()
		# Returns the stage the player reached in hexa.
		Int getHexaRecord()
		# Returns whether the player has completed the specified challenge.
		Boolean hasCompletedChallenge(String challengetag)
		# Returns the current time the player has spent in the challenge.
		Long getChallengeTime()
		# Returns whether the player is playing a map.
		Boolean isPlayingMap()
		# Returns the checkpoint the player has. Returns null when no checkpoint
		# in the current checkpoint mode is set. Returns the checkpoint from the
		# current checkpoint mode (HC or FFA).
		String getCurrentCheckpoint()
		# Returns the amount of FFA points the player has.
		Int getPoints()
		# Returns the amount of global points the player has.
		Int getGlobalPoints()
		# Returns whether the player has completed the specified map.
		Boolean hasCompletedMap(String tag)
		# Returns the current time the player has spent in the map.
		Long getMapTime()
		# Get the amount of times a player has hit any starting checkpoint sign.
		Int getAttempts()
		# Invalidate the player's challenge and map run.
		invalidate()
		# Invalidate the player's time on map and challenge, but allows
		# them to complete the map and challenge.
		invalidateTime()

		Boolean canSee(Player target)
		Int countItem(String id)
		Location getBedLocation()
		String getBedLocationWorld()
		Double getBedLocationX()
		Double getBedLocationY()
		Double getBedLocationZ()
		Double getDirectionX()
		Double getDirectionY()
		Double getDirectionZ()
		String getDisplayName()
		Int getEntityStatistic(statistic::Statistic statistic, entity::EntityType entityType)
		String getGameMode()
		Location getLocation()
		Int getMaterialStatistic(statistic::Statistic statistic, material::Material material)
		String getName()
		Position getPosition()
		String getRank()
		Int getSpeedrunScore()
		Int getStatistic(statistic::Statistic statistic)
		Boolean hasBedLocation()
		sendMessage(String message)
		sendMessageFancy(text::TextComponent[] msg)
		setExp(Float exp)
		String string()
		teleport(Position destination)

		# Gets the blockface of the block that the living entity has likely clicked, ignoring fluids.
		# Null if no block is targeted within 5 blocks distance. Identical to getTargetBlockFace(5).
		String getClickedBlockFace()

		# Gets the blockface of the block that the living entity has targeted, ignoring fluids.
		# Null if no block is targeted within distance.
		String getTargetBlockFace(Int distance)

		# Gets the block that the living entity has targeted, ignoring fluids.
		# Null if no block is targeted within distance.
		Block getTargetBlock(Int distance)

		# Gets the entity being targeted.
		# Null if no entity is targeted within distance.
		Entity getTargetEntity(Int distance)

		# Sets whether gravity applies to this entity.
		# (Please unset this when you are done :) )
		Void setGravity(Boolean gravity)

		# Checks to see if an entity is gliding, such as using an Elytra.
		Boolean isGliding()

		# Returns the type of weather the player is currently experiencing.
		String getPlayerWeather()

		# Sets the type of weather the player will see.
		# When used, the weather status of the player is locked until resetPlayerWeather() is used.
		Void setPlayerWeather(String weather)

		# Restores the normal condition where the player's weather is controlled by server conditions.
		Void resetPlayerWeather()

		# Returns the player's current timestamp.
		Long getPlayerTime()

		# Returns the player's current time offset relative to server time,
		# or the current player's fixed time if the player's time is absolute.
		Long getPlayerTimeOffset()

		# Sets the current time on the player's client.
		# When using non relative time the player's time will stay fixed at the specified time parameter.
		# It's up to the caller to continue updating the player's time.
		# To restore player time to normal use resetPlayerTime().
		Void setPlayerTime(Long time, Boolean serverRelative)

		# Restores the normal condition where the player's time is synchronized with the server time.
		Void resetPlayerTime()

		# Make the entity drop the item in their hand.
		# This will force the entity to drop the item they are holding with an option to drop the entire ItemStack or just 1 of the items.
		Boolean dropItem(Boolean dropAll)
	@endclass

	@class Entity
		# Construct an entity from its UUID.
		# Returns null if it does not exist.
		Entity(String uuid)
		# Find an entity at these coordinates in the passed world.
		# Null if the entity does not exist. In the scenario that multiple entities
		# are in the same location, nondeterministically returns one entity at that location.
		Entity(Int x, Int y, Int z, String world)

		# Gets the entity's type. Actual value returned is a
		# 'magic value' and can change at any spigot or bukkit update.
		String getEntityType()
		# Gets the entity's current x position.
		Double getX()
		# Gets the entity's current y position.
		Double getY()
		# Gets the entity's current z position.
		Double getZ()
		Location getLocation()
		# Gets the entity's current rotation around the y axis.
		Float getYaw()
		# Gets the entity's current rotation around the x axis.
		Float getPitch()
		Double getDirectionX()
		Double getDirectionY()
		Double getDirectionZ()
		# Gets the entity's current velocity in the x direction. Works unreliably if the entity is a player.
		Double getVelocityX()
		# Gets the entity's current velocity in the y direction. Works unreliably if the entity is a player.
		Double getVelocityY()
		# Gets the entity's current velocity in the z direction. Works unreliably if the entity is a player.
		Double getVelocityZ()
		# Gets the current world this entity resides in.
		String getWorld()
		# Returns true if this entity has been marked for removal.
		Boolean isDead()
		# Returns true if the entity is supported by a block.
		# This value is a state updated by the server and is not recalculated unless the entity moves.
		Boolean isOnGround()
		# Deals the given amount of damage to this entity.
		damage(Double amount)
		# Gets the entity's health from 0 to getMaxHealth(), where 0 is dead.
		Double getHealth()
		# Sets the entity's health from 0 to getMaxHealth(), where 0 is dead.
		# Throws IllegalArgumentException if the health is < 0 or > getMaxHealth().
		setHealth(Double health)
		# Gets the maximum health this entity has.
		Int getMaxHealth()
		# Sets the maximum health this entity has. If the health of the entity is
		# above the value provided it will be clamped to the max value. Only sets
		# the 'base' max health value, any modifiers changing this value (potions,
		# etc) will apply *after* this value. The value returned by getMaxHealth may
		# deviate from the value set here.
		setMaxHealth(Int value)
		# Gets the UUID of the entity (in string format).
		String getUniqueId()
		teleport(Position destination)
		Boolean addPassenger(Entity passenger)
		ejectPassengers()
	@endclass

	@class Block
		Block(BlockLocation location)
		# Get the block at these coordinates in the given world.
		Block(Int x, Int y, Int z, String world)
		
		# Returns the Redstone power being provided to this block.
		Int getBlockPower()
		# Returns the amount of light at this block.
		Int getLightLevel()
		# Returns the amount of light at this block from nearby blocks.
		Int getLightFromBlocks()
		# Returns the amount of light at this block from the sky.
		Int getLightFromSky()
		# Gets the type of this block. Actual value returned is a
		# 'magic value' and can change at any spigot or bukkit update.
		String getBlockType()
		# Returns the x-coordinate of this block.
		Int getX()
		# Returns the y-coordinate of this block.
		Int getY()
		# Returns the z-coordinate of this block.
		Int getZ()
		# Returns the world where this block resides in.
		String getWorld()
		BlockLocation getLocation()
		# Returns true if the block is being indirectly powered by Redstone.
		Boolean isBlockIndirectlyPowered()
		# Returns true if the block is being powered by Redstone.
		Boolean isBlockPowered()
		# Returns true if this block is Air.
		Boolean isEmpty()
		# Returns true if this block is liquid.
		Boolean isLiquid()
		String string()
	@endclass

	@class Item
		# Create an item from the passed name with a stack size of amount.
		# Throws MaterialNotFoundException when passed an invalid name.
		Item(String item, Int amount)

		# Gets the amount of items in this stack.
		Int getAmount()
		# Gets the type of this item.
		String getItemType()
		String getDisplayName()
		Boolean hasDisplayName()
		# Get the maximum stacksize for the material held in
		# this ItemStack. (Returns -1 if it has no idea).
		Int getMaxStackSize()
		# Sets the amount of items in this stack.
		setAmount(Int amount)
		# Sets the type of this item. Note that in doing so 
		# you will reset the extra data for this stack as well.
		# Throws MaterialNotFoundException when passed an invalid name.
		setItemType(String item)
		# Returns whether two items are equal, but does not consider stack size (amount).
		Boolean isSimilar(Item item)
		String string()
	@endclass

	@class Location
		Location(Vector3 vector, String world)
		Location(Float x, Float y, Float z, String world)
		Location(Double x, Double y, Double z, String world)
		Location(Int x, Int y, Int z, String world)

		BlockLocation asBlockLocation()
		Vector2 asVector2()
		Vector3 asVector3()
		String getWorld()
		Double getX()
		Double getY()
		Double getZ()
		String string()
	@endclass

	@class BlockLocation
		BlockLocation(BlockVector3 vector, String world)
		BlockLocation(Int x, Int y, Int z, String world)

		BlockVector2 asBlockVector2()
		BlockVector3 asBlockVector3()
		Location asLocation()
		Region[] getRegions()
		String getWorld()
		Int getX()
		Int getY()
		Int getZ()
		set(String block)
		String string()
	@endclass

	@class Position
		Position(Location location, Float yaw, Float pitch)
		Position(Double x, Double y, Double z, FLoat yaw, Float pitch, String world)
		Position(Double x, Double y, Double z, Int yaw, Int pitch, String world)
		Position(Int x, Int y, Int z, Float yaw, Float pitch, String world)
		Position(Int x, Int y, Int z, Int yaw, Int pitch, String world)
		Position(Float x, Float y, Float z, Float yaw, Float pitch, String world)
		Position(Float x, Float y, Float z, Int yaw, Int pitch, String world)

		Location asLocation()
		Float getPitch()
		String getWorld()
		Double getX()
		Double getY()
		Double getZ()
		Float getYaw()
		String string()
	@endclass

	@class Vector2
		Vector2(Double x, Double z)
		Vector2(Float x, Float z)
		Vector2(Int x, Int z)
		Vector2(Long x, Long z)

		Vector2 abs()
		BlockVector2 asBlockVector2()
		Vector3 asVector3()
		Vector2 ceil()
		Boolean containedWithin(Vector2 min, Vector2 max)
		Double distance(Vector2 other)
		Double distanceSq(Vector2 other)
		Double dot(Vector2 other)
		Vector2 floor()
		Vector2 getMaximum(Vector2 other)
		Vector2 getMinimum(Vector2 other)
		Double getX()
		Double getZ()
		Double length()
		Double lengthSq()
		Vector2 normalise()
		Vector2 round()
		String string()
		Vector2 transform2D(Double angle, Double aboutX, Double aboutZ, Double translateX, Double translateZ)
	@endclass

	@class BlockVector2
		BlockVector2(Int x, Int z)

		BlockVector2 abs()
		BlockVector3 asBlockVector3()
		Vector2 asVector2()
		BlockVector2 ceil()
		Boolean containedWithin(BlockVector2 min, BlockVector2 max)
		Double distance(BlockVector2 other)
		Double distanceSq(BlockVector2 other)
		Double dot(BlockVector2 other)
		BlockVector2 floor()
		BlockVector2 getMaximum(BlockVector2 other)
		BlockVector2 getMinimum(BlockVector2 other)
		Int getX()
		Int getZ()
		Double length()
		Double lengthSq()
		BloclVector2 normalise()
		BlockVector2 round()
		String string()
		BlockVector2 transform2D(Double angle, Double aboutX, Double aboutZ, Double translateX, Double translateZ)
	@endclass

	@class Vector3
		Vector3(Double x, Double y, Double z)
		Vector3(Float x, Float y, Float z)
		Vector3(Int x, Int y, Int z)
		Vector3(Long x, Long y, Long z)

		Vector3 abs()
		BlockVector3 asBlockVector3()
		Location asLocation(String world)
		Vector2 asVector2()
		Vector3 ceil()
		Vector3 clampY(Int min, Int max)
		Boolean containedWithin(Vector3 min, Vector3 max)
		Vector3 cross(Vector3 other)
		Double distance(Vector3 other)
		Double distanceSq(Vector3 other)
		Double dot(Vector3 other)
		Vector3 floor()
		Vector3 getMaximum(Vector3 other)
		Vector3 getMinimum(Vector3 other)
		Double getX()
		Double getY()
		Double getZ()
		Double length()
		Double lengthSq()
		Vector3 normalise()
		Vector3 round()
		String string()
		Vector3 transform2D(Double angle, Double aboutX, Double aboutZ, Double translateX, Double translateZ)
	@endclass

	@class BlockVector3
		BlockVector3(Int x, Int y, Int z)

		BlockVector3 abs()
		BlockLocation asBlockLocation(String world)
		BlockVector2 asBlockVector2()
		Vector3 asVector3()
		BlockVector3 ceil()
		BlockVector3 clampY(Int min, Int max)
		Boolean containedWithin(BlockVector3 min, BlockVector3 max)
		BlockVector3 cross(BlockVector3 other)
		Double distance(BlockVector3 other)
		Double distanceSq(BlockVector3 other)
		Double dot(BlockVector3 other)
		BlockVector3 floor()
		BlockVector3 getMaximum(BlockVector3 other)
		BlockVector3 getMinimum(BlockVector3 other)
		Double getX()
		Double getY()
		Double getZ()
		Double length()
		Double lengthSq()
		BlockVector3 normalise()
		BlockVector3 round()
		String string()
		BlockVector3 transform2D(Double angle, Double aboutX, Double aboutZ, Double translateX, Double translateZ)
	@endclass

	@class Region
		Region(String id, String world)
		Region(BlockVector3 min, BlockVector3 max, String world)
		Region(String id, BLockVector3 min, BlockVector3 max, String world)
		Region(BlockVector2[] points, Int minY, Int maxY, String world)
		Region(String id, BlockVectro2[] points, Int minY, Int maxY, String world)
		Region(Int minX, Int minY, Int minZ, Int maxX, Int maxY, Int maxZ, String world)
		Region(String id, Int minX, Int minY, Int minZ, Int maxX, Int maxY, Int maxZ, String world)

		addMemberGroup(String group)
		addMemberPlayer(Player player)
		addOwnerGroup(String group)
		addOwnerPlayer(Player player)
		clearParent()
		Boolean containsAny(BlockVector2[] positions)
		Boolean containsBlockVector2(BlockVector2 vector)
		Boolean containsBlockVector3(BlockVector3 vector)
		Boolean containsCoordinates(Int x, Int y, Int z, String world)
		Boolean containsLocation(BlockLocation location)
		Boolean containsPlayer(Player player)
		Double getDoubleFlag(String flag)
		String getID()
		Int getIntFlag(String flag)
		Region[] getIntersectingRegions(Region[] candidates)
		BlockLocation getMaximumPoint()
		String[] getMemberGroups()
		Player[] getMemberPlayers()
		BlockLocation getMinimumPoint()
		String[] getOwningGroups()
		Player[] getOwningPlayers()
		Region getParent()
		Player[] getPlayersInside()
		Vector2[] getPoints()
		Int getPriority()
		String getRegionType()
		Int getVolume()
		String getWorld()
		Boolean hasMembersOrOwners()
		Boolean isMemberGroup(String group)
		Boolean isMemberPlayer(Player player)
		Boolean isOwnerGroup(String group)
		Boolean isOwnerPlayer(Player player)
		Boolean isPhysicalArea()
		Boolean isTransient()
		Void setDoubleFlag(String flag, Double value)
		Void setIntFlag(String flag, Int value)
		Void setParent(Region parent)
		Void setPriority(Int priority)
		String string()
	@endclass
@endnamespace


@namespace system
	Long currentTimeMillis()
	Double[] getTPS()
@endnamespace


@namespace math
	Double abs(Double x)
	Double arccos(Double x)
	Double arcsin(Double x)
	Double arctan(Double x)
	Int ceil(Double x)
	Double cos(Double x)
	Double deg(Double x)
	Int floor(Double x)
	Double pow(Double base, Double exponent)
	Double rad(Double x)
	Double radarccos(Double x)
	Double radarcsin(Double x)
	Double radarctan(Double x)
	Double radcos(Double x)
	Double radsin(Double x)
	Double radtan(Double x)
	Double random(Double min, Double max)
	Double randomDouble()
	Float randomFloat()
	Int randomInt()
	Long randomLong()
	Double sin(Double x)
	Double sqrt(Double x)
	Double tan(Double x)
@endnamespace


@namespace list
	Int[] range(Int start, Int end)
@endnamespace


@namespace util
	Int executeAndQueryResult(String command)
	Boolean executeAndQuerySuccess(String command)
	String randomUUID()
@endnamespace


@namespace text
	text::TextComponent[] deserialise(String json)
	String escapeJSON(String json)
	text::TextComponent[] fromLegacyText(String text, format::TextFormat defaultColor)
	String serialise(text::TextComponent[] components)
	String toLegacyText(text::TextComponent[] components)
	String toPlainText(text::TextComponent[] components)

	@class TextComponent
		TextComponent(String text)
		TextComponent(String componentType, String value)

		text::TextComponent addExtraComponent(text::TextComponent component)
		text::TextComponent addExtraString(String text)
		text::TextComponent clearBold()
		text::TextComponent clearClickEvent()
		text::TextComponent clearItalic()
		text::TextComponent clearObfuscated()
		text::TextComponent clearStrikethrough()
		text::TextComponent clearUnderlined()
		text::TextComponent copyFormatting(text::TextComponent component, Boolean replace)
		String debug()
		text::TextComponent duplicate()
		String getClickEventAction()
		String getClickEventValue()
		format::TextFormat getColor()
		format::TextFormat getColorRaw()
		String getComponentType()
		String getContent()
		text::TextComponent[] getExtra()
		String getFont()
		String getFontRaw()
		String getInsertion()
		Boolean hasFormatting()
		Boolean isBold()
		Boolean isBoldRaw()
		Boolean isItalic()
		Boolean isItalicRaw()
		Boolean isObfuscated()
		Boolean isObfuscatedRaw()
		Boolean isStrikethrough()
		Boolean isStrikethroughRaw()
		Boolean isUnderlined()
		Boolean isUnderlinedRaw()
		text::TextComponent retain(String retention)
		String serialise()
		text::TextComponent setBold(Boolean state)
		text::TextComponent setClickEvent(String action, String value)
		text::TextComponent setColor(format::TextFormat color)
		text::TextComponent setContent(String value)
		text::TextComponent setExtra(text::TextComponent[] components)
		text::TextComponent setFont(String font)
		text::TextComponent setInsertion(String insertion)
		text::TextComponent setItalic(Boolean state)
		text::TextComponent setObfuscated(Boolean state)
		text::TextComponent setStrikethrough(Boolean state)
		text::TextComponent setUnderlined(Boolean state)
		String string()
		String toLegacyText()
		String toPlainText()
	@endclass

	@class ComponentBuilder
		ComponentBuilder()
		ComponentBuilder(text::TextComponent component)
		ComponentBuilder(text::ComponentBuilder other)
		ComponentBuilder(String text)

		text::ComponentBuilder appendComponent(text::TextComponent component)
		text::ComponentBuilder appendComponentRetain(text::TextComponent component, String formatRetention)
		text::ComponentBuilder appendComponents(text::TextComponent[] components)
		text::ComponentBuilder appendComponentsRetain(text::TextComponent[] components, String formatRetention)
		text::ComponentBuilder appendLegacyText(String text)
		text::ComponentBuilder appendText(String text)
		text::ComponentBuilder appendTextRetain(String text, String formatRetention)
		text::ComponentBuilder bold(Boolean bold)
		text::ComponentBuilder click(String action, String value)
		text::ComponentBuilder color(format::TextFormat color)
		text::TextComponent[] create()
		text::ComponentBuilder font(String font)
		text::TextComponent getComponent(Int pos)
		text::TextComponent getCurrentComponent()
		text::ComponentBuilder insertion(String insertion)
		text::ComponentBuilder italic(Boolean italic)
		text::ComponentBuilder obfuscated(Boolean obfuscated)
		Void removeComponent(Int pos)
		text::ComponentBuilder reset()
		text::ComponentBuilder resetCursor()
		text::ComponentBuilder retain(String formatRetention)
		text::ComponentBuilder setCursor(Int pos)
		text::ComponentBuilder strikethrough(Boolean strikethrough)
		String string()
		text::ComponentBuilder underline(Boolean underline)
	@endclass
@endnamespace

@namespace scoreboard
	addObjective(String name, String type, String displayName)
	clearDisplaySlot(String slot)
	String getObjectiveDisplaySlot(String objective)
	String getObjectiveInDisplaySlot(String slot)
	Int getScore(String player, String objective)
	Boolean objectiveExists(String objective)
	removeObjective(String objective)
	resetObjectiveDisplaySlot(String objectvie)
	setObjectiveDisplaySlot(String objective, String displaySlot)
	setScore(String player, String objective, Int score)
@endnamespace

@namespace timer
	String formatTime(Long time)
	timer::Timer getChallengeTimer(Player player, String tag)
	timer::Timer getCustomTimer(Player player, String tag)
	timer::Timer getMapTimer(Player player, String tag)
	timer::Timer getSpecialTimer(Player player, String tag)
	removeCustomTimer(Player player, String tag)

	@class Timer
		Timer(Player player, String tag, String name)
		Timer(Player player, String tag, String name, Boolean silent)
		Timer(Player player, String tag, String name, Boolean silent, Boolean validate)

		deactivate()
		finish(Boolean silent)
		Long getDeltaTime()
		Long getFinishTime()
		String getName()
		Long getStartTime()
		String getTag()
		String getTimerType()
		invalidate()
		Boolean isActive()
		Boolean isInvalidated()
		Boolean isNullified()
		nullify()
		setFinishTime(Long milli)
		setInvalidState(Boolean state)
		setNullifiedState(Boolean state)
		setStartTime(Long milli)
		start()
		String string()
	@endclass
@endnamespace